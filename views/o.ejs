

486-------641


const cartLoad=async(req,res)=>{
    try {
        const userId = req.session.user; 
        
        const user = await collection.findOne({ email: userId }).populate('cart.product');
        if (user) {
            
          res.render('cart', { cartItems: user.cart});
        } else {
          res.status(404).send('User not found');
        }
      } catch (error) {
        console.error('Error loading cart:', error);
        res.status(500).send('Internal Server Error');
      }
}

const addToCart = async (req, res) => {
    const userId = req.session.user;
    const productId = req.params.id;
   
   
   
    try {
        const product = await productcollection.findOne({ _id: productId });
        const user = await collection.findOne({ email: userId });
       
   
        if (user && product) {
            //
            const existingProductIndex = user.cart.findIndex(item => item.product.toString() === productId);
            //
            if (existingProductIndex !== -1) {
            ///////
            user.cart[existingProductIndex].quantity += 1;
                
            }else{
            const newCart = {
                product:productId,  
                quantity: 1,
            };
            user.cart.push(newCart)
            }
            await user.save();
            
            console.log('Successfully added to cart');
          res.redirect('/')
        } else {
            res.status(404).send('User and product not found');
        }
    } catch (error) {
        console.error('Error adding to cart:', error);
        res.status(500).send('Internal Server Error');
    }
}

const removeFromCart = async (req, res) => {
    const userId = req.session.user;
    const productId = req.params.id; 

    try {
        const user = await collection.findOne({ email: userId });

        if (user) {
           
            const itemIndex = user.cart.findIndex(item => item.product.toString() === productId);

            if (itemIndex !== -1) {
               
                user.cart.splice(itemIndex, 1);
                await user.save(); 

                console.log('Successfully removed item from cart');
                res.redirect('/user/cart');
            } else {
                res.status(404).send('Item not found in the cart');
            }
        } else {
            res.status(404).send('User not found');
        }
    } catch (error) {
        console.error('Error removing item from cart:', error);
        res.status(500).send('Internal Server Error');
    }
}


const quantityUpdate=async (req, res) => {
    const productId = req.params.productId; 
    const newQuantity = req.body.quantity;
    const session=req.session.user
  console.log('userss:',session);
 
   
    try {
        var products=await productcollection.findById(productId)
        
      const User = await collection.findOne({email:session});


      console.log(User)
      if (!User) {
        return res.status(404).json({ message: 'User not found' });
      }
      
    //   const productItem=products.find()
      // Find the specific product in the user's cart and update its quantity
      const cartItem = User.cart.find(item => item.product.toString() === productId);

      if (cartItem) {
        cartItem.quantity = newQuantity;
        
        await User.save(); 
        let totalPrices=0;
        
        User.cart.forEach(item=>{

            totalPrices+=products.price*item.quantity;
            
        })
        User.totalPrice=totalPrices;
        await User.save();


        return res.status(200).json({ message: 'Quantity updated successfully' });
      } else {
        return res.status(404).json({ message: 'Product not found in the cart' });
      }


    } catch (error) {
      return res.status(500).json({ message: 'Error updating quantity', error: error.message });
    }
  };
  
 const cartPost= async(req,res)=>{
    try {
        const userId = req.session.user; 
        const totalPrice = req.body.totalAmount;
const totalAmount = parseInt(totalPrice);
        const user = await collection.findOne({ email: userId }).populate('cart.product').populate('orders.product')   
        const address=await addressCollection.find({userId:user._id })
        user.totalPrice=totalAmount
        await user.save();
        if (user) {
          res.render('checkout', { cartItems: user.cart,user,totalAmount,address});
        } else {
          res.status(404).send('User not found');
        }
      } catch (error) {
        console.error('Error loading cart:', error);
        res.status(500).send('Internal Server Error');
      }

 }


 73------77
 user_Routes.get('/user/cart',userController.cartLoad)
user_Routes.get('/addtocart/:id',userController.addToCart)
user_Routes.get('/cart/remove/:id',userController.removeFromCart)
user_Routes.post('/cart/update/:productId',userController.quantityUpdate)
user_Routes.post('/user/cart',userController.checkoutLoad)


















<section>
	<div class="container my-5">
	  <header class="mb-4">
		<h3>Recommended items</h3>
	  </header>
  
	  <div class="row">
		<%product.forEach((pro)=>{%>

		
		<div class="col-lg-3 col-md-6 col-sm-6">
		  <div class="card px-4 border shadow-0 mb-4 mb-lg-0">
			<div class="mask px-2" style="height: 50px;">
			  <div class="d-flex justify-content-between">
				<h6><span class="badge bg-danger pt-1 mt-3 ms-2">New</span></h6>
				<a href="#"><i class="fas fa-heart text-primary fa-lg float-end pt-3 m-2"></i></a>
			  </div>
			</div>
			<a href="#" class="">
				<img class="img-responsive zoom-img" src="/productimg/<%= pro.image.length > 0 ? pro.image[0] : 'default-image.jpg' %>" alt="<%= pro.image %>" style="width: 80px%; height: 160px;" />
			</a>
			<div class="card-body d-flex flex-column pt-3 border-top">
			  <a href="#" class="nav-link"><%=pro.name%></a>
			  <div class="price-wrap mb-2">
				<strong class="">â‚¹<%=pro.price%></strong>
				
			  </div>
			  <div class="card-footer d-flex align-items-end pt-3 px-0 pb-0 mt-auto">
				<a href="#" class="btn btn-outline-primary w-100">View Details</a>
			  </div>
			</div>
		  </div>
		</div>
		<%})%>
	  </div>
	</div>
  </section>